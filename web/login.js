
const QR_MODAL = document.getElementById('qrModal');
const QR_MODAL_CONTENT = document.getElementById('qr-modal-content');
const MODAL_TITLE = document.getElementById('modal-title');
const MODAL_DESCRIPTION = document.getElementById('modal-description');
const QR_STATUS_TEXT = document.getElementById('qr-status-text');
const QR_LOGIN_BTN = document.getElementById('qr-login-btn');
const QR_CANVAS = document.getElementById('qr-canvas');
const QR_SPINNER = document.getElementById('qr-spinner');
const TWO_FA_FORM = document.getElementById('two-fa-form');
const TWO_FA_INPUT = document.getElementById('2fa-password-input');

let pollingInterval = null;
let currentFlowId = null;

/**
    * –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å—é —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ.
    */
function setModalContent(mode) {
    // –°–±—Ä–æ—Å –≤—Å–µ—Ö —Å–∫—Ä—ã–≤–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    QR_MODAL_CONTENT.classList.remove('show-qr-content');
    TWO_FA_FORM.style.display = 'none';
    QR_SPINNER.style.display = 'none';

    if (mode === 'loading') {
        QR_SPINNER.style.display = 'block';
        MODAL_TITLE.textContent = '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è';
        MODAL_DESCRIPTION.textContent = '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ QR-–∫–æ–¥–∞...';
        QR_STATUS_TEXT.textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.';

    } else if (mode === 'qr') {
        QR_MODAL_CONTENT.classList.add('show-qr-content');
        MODAL_TITLE.textContent = '–°–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥';
        MODAL_DESCRIPTION.textContent = '–û—Ç–∫—Ä–æ–π—Ç–µ Telegram, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ > –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ > –ü–æ–¥–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.';
        QR_STATUS_TEXT.textContent = '–û–∂–∏–¥–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...';

    } else if (mode === '2fa') {
        // –ü—Ä—è—á–µ–º QR-–∫–æ–¥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É 2FA
        MODAL_TITLE.textContent = '–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è';
        MODAL_DESCRIPTION.textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å –æ–±–ª–∞—á–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Telegram.';
        TWO_FA_FORM.style.display = 'block';
        QR_STATUS_TEXT.textContent = '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å.';
        TWO_FA_INPUT.focus();
    }
}


/**
 * 1. –ó–∞–ø—É—Å–∫–∞–µ—Ç QR-–ª–æ–≥–∏–Ω –Ω–∞ –±—ç–∫–µ–Ω–¥–µ.
 * 2. –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å QR-–∫–æ–¥–æ–º.
 * 3. –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞.
 */
async function startQrLogin() {
    // üü¢ –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å —Ñ–æ—Ä–º—ã 2FA –∏ –ø–æ–ª—è –≤–≤–æ–¥–∞
    TWO_FA_FORM.style.display = 'none'; 
    TWO_FA_INPUT.value = '';
    // ----------------------------------------------------
    
    QR_LOGIN_BTN.disabled = true;
    QR_MODAL.style.display = 'block';
    setModalContent('loading'); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä

    try {
        // 1. –ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏—é QR-–ª–æ–≥–∏–Ω–∞
        const response = await fetch('/auth/qr', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'}
        });
        const data = await response.json();

        if (data.error) {
            throw new Error(data.error);
        }

        currentFlowId = data.flow_id;
        const qrUrl = data.qr_url;

        // 2. –û—Ç–æ–±—Ä–∞–∂–∞–µ–º QR-–∫–æ–¥
        await showQrCode(qrUrl);
        setModalContent('qr'); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º QR-–∫–æ–¥

        // 3. –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å
        startPolling();

    } catch (error) {
        setModalContent('loading'); 
        QR_STATUS_TEXT.textContent = `‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏: ${error.message}`;
        console.error("QR Start Error:", error);
        QR_LOGIN_BTN.disabled = false;
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –µ—Å–ª–∏ –æ–ø—Ä–æ—Å –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω
        setTimeout(() => {
            if (pollingInterval === null) {
                QR_MODAL.style.display = 'none';
            }
        }, 3000);
    }
}

/**
    * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR-–∫–æ–¥.
    */
function showQrCode(url) {
    return new Promise((resolve) => {
        const context = QR_CANVAS.getContext('2d');
        context.clearRect(0, 0, QR_CANVAS.width, QR_CANVAS.height);
        
        QRCode.toCanvas(QR_CANVAS, url, { width: 256, margin: 2 }, function (error) {
            if (error) {
                    console.error("QR Code Generation Error:", error);
                    QR_STATUS_TEXT.textContent = '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥.';
            }
            resolve();
        });
    });
}

/**
    * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ–ø—Ä–æ—Å –±—ç–∫–µ–Ω–¥–∞.
    */
function startPolling() {
    if (pollingInterval) clearInterval(pollingInterval);
    // –û–ø—Ä–æ—Å –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    pollingInterval = setInterval(checkQrStatus, 2000);
}

/**
    * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–ø—Ä–æ—Å.
    */
function stopPolling() {
    if (pollingInterval) {
        clearInterval(pollingInterval);
        pollingInterval = null;
    }
}

/**
    * –û–ø—Ä–∞—à–∏–≤–∞–µ—Ç –±—ç–∫–µ–Ω–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ QR-–ª–æ–≥–∏–Ω–∞.
    */
async function checkQrStatus() {
    if (!currentFlowId) {
        console.error("Flow ID is missing, stopping polling.");
        stopPolling();
        return;
    }

    try {
        const response = await fetch('/auth/qr/check', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({ flow_id: currentFlowId })
        });
        const data = await response.json();

        if (data.status === 'waiting') {
            QR_STATUS_TEXT.textContent = '–û–∂–∏–¥–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...';

        } else if (data.status === 'authorized') {
            // –£–°–ü–ï–•: –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω
            stopPolling();
            QR_STATUS_TEXT.textContent = '‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...';
            
            if (data.redirect) {
                window.location.href = data.redirect;
            } else {
                setTimeout(closeQrModal, 3000);
            }
            
        } else if (data.status === '2fa_required') {
            // üü¢ –ù–û–í–´–ô –°–¢–ê–¢–£–°: –¢–†–ï–ë–£–ï–¢–°–Ø 2FA
            stopPolling(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ä–æ—Å QR-—Å—Ç–∞—Ç—É—Å–∞
            promptFor2fa();

        } else if (data.status === 'error' || data.status === 'canceled') {
            // –û–®–ò–ë–ö–ê / –û–¢–ú–ï–ù–ê / –¢–ê–ô–ú–ê–£–¢
            stopPolling();
            QR_STATUS_TEXT.textContent = `‚ùå –û—à–∏–±–∫–∞: ${data.message || '–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω.'}`;
            setTimeout(closeQrModal, 3000);
        }

    } catch (error) {
        stopPolling();
        QR_STATUS_TEXT.textContent = '‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞.';
        console.error("QR Check Error:", error);
        setTimeout(closeQrModal, 3000);
    }
}

/**
    * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–æ–¥–∞ 2FA –ø–∞—Ä–æ–ª—è.
    */
function promptFor2fa() {
    setModalContent('2fa');
    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ–ø—ã—Ç–æ–∫
    TWO_FA_INPUT.value = '';
}

/**
    * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç 2FA –ø–∞—Ä–æ–ª—å –Ω–∞ –±—ç–∫–µ–Ω–¥.
    * üü¢ –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å —è–≤–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç event –∏ –≤—ã–∑—ã–≤–∞–µ—Ç preventDefault().
    */
async function send2faPassword(event) {
    // üü¢ –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Ñ–æ—Ä–º—ã (–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É)
    if (event) {
        event.preventDefault(); 
    }
    
    console.log(`[2FA] Function called. Flow ID: ${currentFlowId}`); // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ª–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

    const password = TWO_FA_INPUT.value;
    if (!password || !currentFlowId) {
        console.error("Missing password or flow ID. Cannot send 2FA.");
        return;
    }

    // –ë–ª–æ–∫–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∏–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞
    const submitButton = TWO_FA_FORM.querySelector('button');
    submitButton.disabled = true;
    QR_STATUS_TEXT.textContent = '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è...';

    try {
        console.log("–∏–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ 2fa check")
        const response = await fetch('/auth/qr/2fa', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({ flow_id: currentFlowId, password: password })
        });
        const data = await response.json();

        if (data.status === 'success') {
            // –£–°–ü–ï–•: 2FA –ø—Ä–æ–π–¥–µ–Ω–∞, –≤—Ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω.
            QR_STATUS_TEXT.textContent = '‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏...';
            
            // –°–Ω–æ–≤–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å 'authorized'
            setModalContent('loading'); 
            startPolling();
            
        } else if (data.status === '2fa_required') {
            // –û–®–ò–ë–ö–ê: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å (–±—ç–∫–µ–Ω–¥ –≤–µ—Ä–Ω—É–ª, —á—Ç–æ 2FA –≤—Å–µ –µ—â–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
            QR_STATUS_TEXT.textContent = `‚ùå ${data.message || '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å.'} –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.`;
            TWO_FA_INPUT.value = ''; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
            TWO_FA_INPUT.focus();

        } else if (data.status === 'error') {
            // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ 2FA
            QR_STATUS_TEXT.textContent = `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${data.message || '–°–±–æ–π 2FA —Å–µ—Å—Å–∏–∏.'}`;
            setTimeout(closeQrModal, 3000);
        }
        
        // –°–Ω–æ–≤–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        if (data.status !== 'success' && data.status !== 'error') {
            submitButton.disabled = false;
        }
        
    } catch (error) {
        QR_STATUS_TEXT.textContent = '‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∞—Ä–æ–ª—è.';
        console.error("2FA Send Error:", error);
        submitButton.disabled = false;
    }
}

/**
    * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É —Å–µ—Å—Å–∏–∏.
    */
async function closeQrModal() {
    stopPolling();
    QR_MODAL.style.display = 'none';
    QR_LOGIN_BTN.disabled = false;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞ QR –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑–∞
    setModalContent('qr'); 

    if (currentFlowId) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –±—ç–∫–µ–Ω–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        try {
            await fetch('/auth/qr/cancel', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({ flow_id: currentFlowId })
            });
            console.log(`[${currentFlowId}] –°–µ—Å—Å–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ.`);
        } catch (error) {
            console.error("QR Cancel Error:", error);
        }
        currentFlowId = null;
    }
}
