from telethon import TelegramClient
from telethon.sessions import StringSession
from backend.config import API_HASH,API_ID
from database.crud  import add_or_update_session_to_db
from datetime import datetime, timedelta, timezone


async def  send_telegram_message(session: str, user: str, message: str)-> bool:
    """–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ  telegram user"""
    print("—Ä–∞–±–æ–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è  send_telegram_message")
    try:
        async with TelegramClient(StringSession(session),API_ID,API_HASH) as client:
            try:
                entity =  await client.get_entity(user)
                print("–ø–æ–ª—É—á–µ–Ω–∞  —Å—É—â–Ω–æ—Å—Ç—å  –ø–æ  peer_id")
                print(entity)
                await client.send_message(entity,message)
                return True
            except Exception as e:
                print(f"—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—à–∏–±–∫–∞ {e}")
                return False
    except Exception as e:
        print(f"–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ send_message –æ—à–∏–±–∫–∞: {e}")
        return False
    




async def  get_data_telegram_contact(session:str,data_cont:str,user_id:str|int):
    """ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ –∏ –¥–æ–±–∞–¥—è–µ—Ç –µ–≥–æ –≤ db"""

    try:
        async with TelegramClient(StringSession(session),API_ID,API_HASH) as client:
            try:
                contact =  await client.get_entity(data_cont)
                print(contact)

                data_contact = {}
                data_contact["telegram_id"] = contact.id
                data_contact["username"] = getattr(contact,'username',None)
                data_contact["first_name"] = getattr(contact,"first_name",None)
                data_contact["last_name"] = getattr(contact,"last_name",None)
                data_contact["photo_url"] = getattr(contact,"photo_url",None)
                data_contact["phone"] = getattr(contact,"number", None)
                new_session_str = client.session.save()
                session = await add_or_update_session_to_db(new_session_str,user_id)
                

                return True, data_contact
            except Exception as e:
                print(f'–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏ –≤ —Ñ—É–Ω–∫—Ü–∏–∏  get_data_telegram_contact, –æ—à–∏–±–∫–∞: {e}')
                return False, None
    except Exception as e:
                print(f'–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏  get_data_telegram_contact, –æ—à–∏–±–∫–∞: {e}')
                return False , None      



# async def  get_messages_from_dialog(session : str,username: str,offset_houres: int =12,fetch_limit: int = 200):
#     print("–†–∞–±–æ—Ç–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è  get_messages_from_dialog")
#     recent_sent_messages = []
    
#     offset_date = datetime.now(timezone.utc) - timedelta(hours=offset_houres)


#     async with TelegramClient(StringSession(session),API_ID,API_HASH) as client:

#         entity = await client.get_entity(username)

#         messages = await client.get_messages(
#                 entity, 
#                 limit=fetch_limit,
#             )
#         print(f" len message - {len(messages)}")
#         for ind ,message in enumerate(messages):
            
          
            
#             if not message.date or not message.text:
#                 print(f"iteration -{ind}")
#                 print("–æ—Ç—Ä–∞–±–æ—Ç–∞–ª continue")
#                 continue
                
            
#             if message.out and message.date > offset_date:
#                 print("–æ—Ç—Ä–∞–±–æ—Ç–∞–ª  –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫")
#                 recent_sent_messages.append({
#                     "id": message.id,
#                     "date": message.date.strftime('%Y-%m-%d %H:%M:%S UTC'),
#                     "text": message.text
#                 })
               
                
                
#         print(recent_sent_messages)
#         return True, recent_sent_messages   
#     return False , None

async def get_messages_from_dialog(session: str, username: str, offset_houres: int = 12, fetch_limit: int = 200):
    print("–†–∞–±–æ—Ç–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è get_messages_from_dialog")

    recent_sent_messages = []
    offset_date = datetime.now(timezone.utc) - timedelta(hours=offset_houres)
    print(f"–ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–æ–≤–µ–µ: {offset_date}")

    async with TelegramClient(StringSession(session), API_ID, API_HASH) as client:
        entity = await client.get_entity(username)

        messages = await client.get_messages(entity, limit=fetch_limit)
        print(f"–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")

        for ind, message in enumerate(messages):
            if not message.date or not message.text:
                continue

            # üïí –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ UTC
            msg_date = message.date.replace(tzinfo=timezone.utc) if message.date.tzinfo is None else message.date

            # üì® –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏—Å—Ö–æ–¥—è—â–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤
            if message.out and msg_date > offset_date:
                recent_sent_messages.append({
                    "id": message.id,
                    "date": msg_date.strftime('%Y-%m-%d %H:%M:%S UTC'),
                    "text": message.text
                })

        print(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {offset_houres} —á–∞—Å–æ–≤: {len(recent_sent_messages)}")
        return True, recent_sent_messages

    return False, None